# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# yamllint disable rule:line-length
version: 2.1

defaults: &defaults
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.11

workflows:
  version: 2
  pyramid_openapi3:
    jobs:
      - test_37:
          filters:
            tags:
              only: /.*/
      - test_38:
          filters:
            tags:
              only: /.*/
      - test_39:
          filters:
            tags:
              only: /.*/
      - test_310:
          filters:
            tags:
              only: /.*/
      - test_311:
          filters:
            tags:
              only: /.*/
      - test_nix_shell:
          filters:
            tags:
              only: /.*/
      - release:
          requires:
            - test_37
            - test_38
            - test_39
            - test_310
            - test_311
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/

commands:
  install_dependencies:
    description: "Install dependencies"
    parameters:
      python_version:
        type: string
        default: "py311"
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-<< parameters.python_version >>-{{ checksum "poetry.lock" }}

      - run:
          name: Install dependencies
          command: |
            poetry install

      - save_cache:
          paths:
            - ./.venv
          key: v1-dependencies-<< parameters.python_version >>-{{ checksum "poetry.lock" }}


  run_tests:
    description: "Run tests"
    steps:

      - run:
          name: Run linters and unit tests
          command: |
            make lint all=true
            make types
            make unit

      - run:
          name: Run tests for the singlefile example
          command: |
            cd examples/singlefile
            poetry run python -m unittest app.py

      - run:
          name: Run tests for the todoapp example
          command: |
            cd examples/todoapp
            poetry run python -m unittest tests.py

      - run:
          name: Run tests for the splitfile example
          command: |
            cd examples/splitfile
            poetry run python -m unittest tests.py

      - store_artifacts:
          path: htmlcov

      - store_artifacts:
          path: htmltypecov

jobs:

  test_311:
    <<: *defaults

    steps:
      - checkout

      - install_dependencies:
          python_version: "py311"

      - run_tests

      # - run:
      #     name: Upload test durations to BlueRacer.io
      #     command: |
      #       bash <(curl -s https://app.blueracer.io/upload)

  test_310:
    <<: *defaults
    docker:
      - image: cimg/python:3.10

    steps:
      - checkout

      - install_dependencies:
          python_version: "py310"

      - run_tests

  test_39:
    <<: *defaults
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout

      - install_dependencies:
          python_version: "py39"

      - run_tests


  test_38:
    <<: *defaults
    docker:
      - image: cimg/python:3.8

    steps:
      - checkout

      - install_dependencies:
          python_version: "py38"

      - run_tests


  test_37:
    <<: *defaults
    docker:
      - image: cimg/python:3.7


    steps:
      - checkout

      - run:
          name: Test oldest supported openapi-core and pyramid versions on Python 3.7
          command: |
            mv pyproject_py37.toml pyproject.toml
            mv poetry_py37.lock poetry.lock

      - install_dependencies:
          python_version: "py37"

      - run_tests

  test_nix_shell:
    resource_class: large
    working_directory: ~/pyramid_openapi3
    docker:
      - image: niteo/nixpkgs-nixos-22.11:ce5fe99df1f15a09a91a86be9738d68fadfbad82

    environment:
      CACHIX_NAME: pyramid-openapi3

    steps:

      - checkout:
          path: ~/pyramid_openapi3

      - run:
          name: Configure Nix and Cachix
          no_output_timeout: 30m
          command: |
            mkdir -p /etc/nix
            echo "sandbox = false" >> /etc/nix/nix.conf
            cachix use "$CACHIX_NAME"
            cachix watch-exec "$CACHIX_NAME" nix-shell -- --run "echo 'nix-shell successfully entered'"

      - run:
          name: Upload Linux dependencies
          command: |
            cachix watch-exec "$CACHIX_NAME" nix-build -- shell.nix -A inputDerivation

      - run:
          name: Run tests
          command: nix-shell --run "make tests"

      - run:
          name: Run tests for one example
          command: |
            nix-shell --run "poetry install --only-root"
            nix-shell --run "cd examples/todoapp && poetry run python -m unittest tests.py"

  release:
    <<: *defaults

    # To test publishing to testpypi:
    # * comment out `branches: ignore: /.*/` in workflows at the top of this file
    # * comment out "verify git tag matches pyproject.toml version" below
    # * uncomment POETRY_REPOSITORIES_TESTPYPI_URL
    # * append `-r testpypi` to poetry publish command
    environment:
      POETRY_REPOSITORIES_TESTPYPI_URL: https://test.pypi.org/legacy/

    steps:
      - checkout

      - install_dependencies:
          python_version: "py311"

      - run:
          name: verify git tag matches pyproject.toml version
          command: |
            echo "$CIRCLE_TAG"
            echo `poetry version --short`
            [[ "$CIRCLE_TAG" == `poetry version --short` ]] && exit 0 || exit 1

      # POETRY_PYPI_TOKEN_PYPI secret is set in CircleCI Project Settings
      - run:
          name: publish to pypi
          command: |
            poetry publish --build
